{"version":3,"file":"component---src-pages-using-typescript-tsx-1be4c70a83c8e7d4af85.js","mappings":"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","sources":["webpack://weekly-notes/./gatsby-config.js","webpack://weekly-notes/./src/pages/using-typescript.tsx","webpack://weekly-notes/./src/components/layout.js","webpack://weekly-notes/./src/components/seo.js"],"sourcesContent":["/**\n * Configure your Gatsby site with this file.\n *\n * See: https://www.gatsbyjs.com/docs/reference/config-files/gatsby-config/\n */\n\n/**\n * @type {import('gatsby').GatsbyConfig}\n */\nmodule.exports = {\n  pathPrefix: `/weekly-notes`,\n  siteMetadata: {\n    title: `週記`,\n    author: {\n      name: `chonai-flora`\n    },\n    description: `Weekly notes by chonai-flora`,\n    siteUrl: `https://chonai-flora.github.io/weekly-notes`,\n    social: {\n      twitter: ``,\n    },\n  },\n  plugins: [\n    `gatsby-plugin-image`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/notes`,\n        name: `note`,\n      },\n    },\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-images`,\n            options: {\n              maxWidth: 630,\n            },\n          },\n          {\n            resolve: `gatsby-remark-responsive-iframe`,\n            options: {\n              wrapperStyle: `margin-bottom: 1.0725rem`,\n            },\n          },\n          `gatsby-remark-prismjs`,\n        ],\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    {\n      resolve: `gatsby-plugin-feed`,\n      options: {\n        query: `\n          {\n            site {\n              siteMetadata {\n                title\n                description\n                siteUrl\n                site_url: siteUrl\n              }\n            }\n          }\n        `,\n        feeds: [\n          {\n            serialize: ({ query: { site, allMarkdownRemark } }) => {\n              return allMarkdownRemark.nodes.map(node => {\n                return Object.assign({}, node.frontmatter, {\n                  description: node.excerpt,\n                  date: node.frontmatter.date,\n                  url: site.siteMetadata.siteUrl + node.fields.slug,\n                  guid: site.siteMetadata.siteUrl + node.fields.slug,\n                  custom_elements: [{ \"content:encoded\": node.html }],\n                })\n              })\n            },\n            query: `{\n              allMarkdownRemark(sort: {frontmatter: {date: DESC}}) {\n                nodes {\n                  excerpt\n                  html\n                  fields {\n                    slug\n                  }\n                  frontmatter {\n                    title\n                    date\n                  }\n                }\n              }\n            }`,\n            output: \"/rss.xml\",\n            title: \"Gatsby Starter Blog RSS Feed\",\n          },\n        ],\n      },\n    },\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `Gatsby Starter Blog`,\n        short_name: `Gatsby`,\n        start_url: `/`,\n        background_color: `#ffffff`,\n        // This will impact how browsers show your PWA/website\n        // https://css-tricks.com/meta-theme-color-and-trickery/\n        // theme_color: `#663399`,\n        display: `minimal-ui`,\n        icon: `src/images/gatsby-icon.png`, // This path is relative to the root of the site.\n      },\n    },\n  ],\n}\n","// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" description=\"\" children={undefined} />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import { Link } from \"gatsby\"\nimport * as React from \"react\"\n\nimport { pathPrefix } from \"../../gatsby-config\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <>\n        <h2 className=\"main-heading\">\n          <Link to={pathPrefix}>\n            {title}\n            <span style={{\n              fontSize: \"smaller\",\n              fontWeight: \"lighter\"\n            }}> - chonai-flora</span>\n          </Link>\n        </h2>\n        <br />\n        <p>\n          週記です。\n          <a href=\"archives/\">こちら</a>も。\n        </p>\n      </>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to={pathPrefix}>{title}</Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <hr />\n      <footer style={{ textAlign: \"center\" }}>&copy; {new Date().getFullYear()}, Build with Gatsby </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ title, slug, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            siteUrl\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const siteUrl = site.siteMetadata?.siteUrl\n  const metaUrl = `${siteUrl}${slug}`\n  const ogpSrc = `${siteUrl}/${slug ? `images${slug.slice(0, -1)}.png` : `ogp.png`}`\n  const metaTitle = slug ? `${title} | ${site.siteMetadata?.title}` : site.siteMetadata?.title\n\n  return (\n    <>\n      <head prefix=\"og: https://ogp.me/ns#\" />\n      <title>{metaTitle}</title>\n      <link rel=\"icon\" href={`${siteUrl}/favicon.ico`} />\n      <meta name=\"description\" content={site.siteMetadata.description} />\n      <meta property=\"og:title\" content={metaTitle} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image\" content={ogpSrc} />\n      <meta property=\"og:url\" content={metaUrl} />\n      <meta property=\"og:description\" content={site.siteMetadata.description} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:image\" content={ogpSrc} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["module","exports","pathPrefix","siteMetadata","title","author","name","description","siteUrl","social","twitter","plugins","resolve","options","path","__dirname","maxWidth","wrapperStyle","query","feeds","serialize","site","allMarkdownRemark","nodes","map","node","Object","assign","frontmatter","excerpt","date","url","fields","slug","guid","custom_elements","html","output","short_name","start_url","background_color","display","icon","Head","React","Seo","children","undefined","_ref","data","location","Layout","buildTime","href","Link","to","isRootPath","pathname","header","className","style","fontSize","fontWeight","textAlign","Date","getFullYear","useStaticQuery","metaUrl","ogpSrc","slice","metaTitle","prefix","rel","content","property"],"sourceRoot":""}