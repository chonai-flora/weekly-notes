{"version":3,"file":"component---src-pages-404-js-61e6ff9654386e2747fb.js","mappings":"yIA2CA,IAxCe,IAAoC,IAAnC,SAAEA,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EADcC,mBACDJ,EAASK,SAC5B,IAAIC,EA2BJ,OAxBEA,EADEH,EAEA,gCACE,sBAAII,UAAU,gBACZ,gBAAC,EAAAC,KAAI,CAACC,GAAG,KACNR,EACD,wBAAMS,MAAO,CACXC,SAAU,UACVC,WAAY,YACX,qBAGP,2BACA,yBAAG,QAED,qBAAGC,KAAK,4CAA2C,OAAO,OAM9D,gBAAC,EAAAL,KAAI,CAACC,GAAG,IAAIF,UAAU,oBAAqBN,GAK9C,uBAAKM,UAAU,iBAAiB,oBAAmBJ,GACjD,0BAAQI,UAAU,iBAAiBD,GACnC,4BAAOJ,GACP,2BACA,0BAAQQ,MAAO,CAAEI,UAAW,WAAY,MAAQ,IAAIC,MAAOC,cAAc,wBACrE,C,+CCaV,IA1CY,IAAgC,IAAD,UAA9B,MAAEf,EAAK,KAAEgB,EAAI,SAAEf,GAAU,EACpC,MAAM,KAAEgB,IAASC,EAAAA,EAAAA,gBAAe,cAiB1BC,EAA2B,QAApB,EAAGF,EAAKG,oBAAY,aAAjB,EAAmBD,QAC7BE,EAAO,GAAMF,EAAUH,EACvBM,EAAYH,EAAO,KAAIH,EAAI,SAAYA,EAAKO,MAAM,GAAI,GAAE,OAAU,OAClEC,EAAYR,EAAUhB,EAAK,OAAuB,QAAvB,EAAMiB,EAAKG,oBAAY,aAAjB,EAAmBpB,OAA2B,QAAtB,EAAKiB,EAAKG,oBAAY,aAAjB,EAAmBpB,MAGvF,OADAyB,QAAQC,IAAIJ,GAEV,gCACE,wBAAMK,OAAO,2BACb,6BAAQH,GACR,wBAAMI,IAAI,OAAOhB,KAASO,EAAO,iBACjC,wBAAMU,KAAK,cAAcC,QAASb,EAAKG,aAAaW,cACpD,wBAAMC,SAAS,WAAWF,QAASN,IACnC,wBAAMQ,SAAS,UAAUF,QAAQ,YACjC,wBAAME,SAAS,WAAWF,QAASR,IACnC,wBAAMU,SAAS,SAASF,QAAST,IACjC,wBAAMW,SAAS,iBAAiBF,QAASb,EAAKG,aAAaW,cAC3D,wBAAMF,KAAK,eAAeC,QAAQ,YAClC,wBAAMD,KAAK,gBAAgBC,QAASR,IACnCrB,EACA,C,kGC1CP,MAWagC,EAAO,IAAM,gBAAC,IAAG,CAACjC,MAAM,mBAErC,UAbqB,IAAyB,IAAxB,KAAEkC,EAAI,SAAEnC,GAAU,EACtC,MAAMoC,EAAYD,EAAKjB,KAAKG,aAAapB,MAEzC,OACE,gBAAC,IAAM,CAACD,SAAUA,EAAUC,MAAOmC,GACjC,0BAAI,kBACJ,yBAAG,2DACI,C","sources":["webpack://weekly-notes/./src/components/layout.js","webpack://weekly-notes/./src/components/seo.js","webpack://weekly-notes/./src/pages/404.js"],"sourcesContent":["import { Link } from \"gatsby\"\nimport * as React from \"react\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <>\n        <h2 className=\"main-heading\">\n          <Link to=\"/\">\n            {title}\n            <span style={{\n              fontSize: \"smaller\",\n              fontWeight: \"lighter\"\n            }}> - chonai-flora</span>\n          </Link>\n        </h2>\n        <br />\n        <p>\n          週記です。\n          <a href=\"https://chonai-flora.github.io/archives/\">こちら</a>も。\n        </p>\n      </>\n    )\n  } else {\n    header = (\n      <Link to=\"/\" className=\"header-link-home\" >{title}</Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <hr />\n      <footer style={{ textAlign: \"center\" }}>&copy; {new Date().getFullYear()}, Build with Gatsby </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ title, slug, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            siteUrl\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const siteUrl = site.siteMetadata?.siteUrl\n  const metaUrl = `${siteUrl}${slug}`\n  const ogpSrc = `${siteUrl}/${slug ? `images${slug.slice(0, -1)}` : `ogp`}.png`\n  const metaTitle = slug ? `${title} | ${site.siteMetadata?.title}` : site.siteMetadata?.title\n\n  console.log(ogpSrc)\n  return (\n    <>\n      <head prefix=\"og: https://ogp.me/ns#\" />\n      <title>{metaTitle}</title>\n      <link rel=\"icon\" href={`${siteUrl}/favicon.ico`} />\n      <meta name=\"description\" content={site.siteMetadata.description} />\n      <meta property=\"og:title\" content={metaTitle} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image\" content={ogpSrc} />\n      <meta property=\"og:url\" content={metaUrl} />\n      <meta property=\"og:description\" content={site.siteMetadata.description} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:image\" content={ogpSrc} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst NotFoundPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>404: Not Found</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"404: Not Found\" />\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"names":["location","title","children","isRootPath","__PATH_PREFIX__","pathname","header","className","Link","to","style","fontSize","fontWeight","href","textAlign","Date","getFullYear","slug","site","useStaticQuery","siteUrl","siteMetadata","metaUrl","ogpSrc","slice","metaTitle","console","log","prefix","rel","name","content","description","property","Head","data","siteTitle"],"sourceRoot":""}