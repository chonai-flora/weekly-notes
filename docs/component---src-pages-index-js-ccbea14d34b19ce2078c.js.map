{"version":3,"file":"component---src-pages-index-js-ccbea14d34b19ce2078c.js","mappings":"yIAoCA,IAjCe,IAAoC,IAAnC,SAAEA,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EAD6B,MAChBH,EAASI,SAC5B,IAAIC,EAoBJ,OAjBEA,EADEF,EAEA,sBAAIG,UAAU,gBACZ,gBAAC,EAAAC,KAAI,CAACC,GAAG,KACNP,EACD,wBAAMQ,MAAO,CACXC,SAAU,UACVC,WAAY,YACX,qBAMP,gBAAC,EAAAJ,KAAI,CAACD,UAAU,mBAAmBE,GAAG,KAAKP,GAK7C,uBAAKK,UAAU,iBAAiB,oBAAmBH,GACjD,0BAAQG,UAAU,iBAAiBD,GACnC,4BAAOH,GACP,2BACA,0BAAQO,MAAO,CAAEG,UAAW,WAAY,MAAQ,IAAIC,MAAOC,cAAc,wBACrE,C,+CCmBV,IAzCY,IAAgC,IAAD,UAA9B,MAAEb,EAAK,KAAEc,EAAI,SAAEb,GAAU,EACpC,MAAM,KAAEc,IAASC,EAAAA,EAAAA,gBAAe,cAiB1BC,EAA2B,QAApB,EAAGF,EAAKG,oBAAY,aAAjB,EAAmBD,QAC7BE,EAAO,GAAMF,EAAUH,EACvBM,EAAYH,EAAO,KAAIH,EAAI,SAAYA,EAAKO,MAAM,GAAI,GAAE,kBACxDC,EAAYR,EAAUd,EAAK,OAAuB,QAAvB,EAAMe,EAAKG,oBAAY,aAAjB,EAAmBlB,OAA2B,QAAtB,EAAKe,EAAKG,oBAAY,aAAjB,EAAmBlB,MAEvF,OACE,gCACE,wBAAMuB,OAAO,2BACb,6BAAQD,GACR,wBAAME,IAAI,OAAOC,KAASR,EAAO,iBACjC,wBAAMS,KAAK,cAAcC,QAASZ,EAAKG,aAAaU,cACpD,wBAAMC,SAAS,WAAWF,QAASL,IACnC,wBAAMO,SAAS,UAAUF,QAAQ,YACjC,wBAAME,SAAS,WAAWF,QAASP,IACnC,wBAAMS,SAAS,SAASF,QAASR,IACjC,wBAAMU,SAAS,iBAAiBF,QAASZ,EAAKG,aAAaU,cAC3D,wBAAMF,KAAK,eAAeC,QAAQ,YAClC,wBAAMD,KAAK,gBAAgBC,QAASP,IACnCnB,EACA,C,6GCKP,UA9CkB,IAAyB,IAAD,MAAvB,KAAE6B,EAAI,SAAE/B,GAAU,EACnC,MAAMgC,GAAkC,QAAtB,EAAAD,EAAKf,KAAKG,oBAAY,aAAtB,EAAwBlB,QAAK,QACzCgC,EAAQF,EAAKG,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAM,CAACpC,SAAUA,EAAUC,MAAO+B,GACjC,yBAAG,uJAUP,gBAAC,IAAM,CAAChC,SAAUA,EAAUC,MAAO+B,GACjC,sBAAIvB,MAAO,CAAE4B,UAAU,SACpBJ,EAAMK,KAAIC,IACT,MAAMtC,EAAQsC,EAAKC,YAAYvC,OAASsC,EAAKE,OAAO1B,KAEpD,OACE,sBAAI2B,IAAKH,EAAKE,OAAO1B,MACnB,2BACET,UAAU,iBACVqC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAArC,KAAI,CAACC,GAAE,GAAKuB,EAAKf,KAAK6B,WAAaN,EAAKE,OAAO1B,KAAQ+B,SAAS,OAC/D,wBAAMA,SAAS,YAAY7C,KAG/B,6BAAQsC,EAAKC,YAAYO,QAG1B,KAIJ,EAWN,MAAMC,EAAO,IAAM,gBAAC,IAAG,CAAC/C,MAAM,YAAYc,KAAK,I","sources":["webpack://weekly-notes/./src/components/layout.js","webpack://weekly-notes/./src/components/seo.js","webpack://weekly-notes/./src/pages/index.js"],"sourcesContent":["import { Link } from \"gatsby\"\nimport * as React from \"react\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h2 className=\"main-heading\">\n        <Link to=\"/\">\n          {title}\n          <span style={{\n            fontSize: \"smaller\",\n            fontWeight: \"lighter\"\n          }}> - chonai-flora</span>\n          </Link>\n      </h2>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">{title}</Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <hr />\n      <footer style={{ textAlign: \"center\" }}>&copy; {new Date().getFullYear()}, Build with Gatsby </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ title, slug, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            siteUrl\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const siteUrl = site.siteMetadata?.siteUrl\n  const metaUrl = `${siteUrl}${slug}`\n  const ogpSrc = `${siteUrl}/${slug ? `images${slug.slice(0, -1)}.png` : `ogp.png`}`\n  const metaTitle = slug ? `${title} | ${site.siteMetadata?.title}` : site.siteMetadata?.title\n\n  return (\n    <>\n      <head prefix=\"og: https://ogp.me/ns#\" />\n      <title>{metaTitle}</title>\n      <link rel=\"icon\" href={`${siteUrl}/favicon.ico`} />\n      <meta name=\"description\" content={site.siteMetadata.description} />\n      <meta property=\"og:title\" content={metaTitle} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image\" content={ogpSrc} />\n      <meta property=\"og:url\" content={metaUrl} />\n      <meta property=\"og:description\" content={site.siteMetadata.description} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:image\" content={ogpSrc} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Seo from \"../components/seo\"\nimport Layout from \"../components/layout\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <p>\n          No blog posts found. Add markdown posts to \"notes\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={`${data.site.pathPrefix}${post.fields.slug}`} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All notes\" slug=\"\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      pathPrefix\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY/MM/DD\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["location","title","children","isRootPath","pathname","header","className","Link","to","style","fontSize","fontWeight","textAlign","Date","getFullYear","slug","site","useStaticQuery","siteUrl","siteMetadata","metaUrl","ogpSrc","slice","metaTitle","prefix","rel","href","name","content","description","property","data","siteTitle","posts","allMarkdownRemark","nodes","length","listStyle","map","post","frontmatter","fields","key","itemScope","itemType","pathPrefix","itemProp","date","Head"],"sourceRoot":""}