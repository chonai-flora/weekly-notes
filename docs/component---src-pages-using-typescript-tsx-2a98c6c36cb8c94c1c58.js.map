{"version":3,"file":"component---src-pages-using-typescript-tsx-2a98c6c36cb8c94c1c58.js","mappings":"uMAaA,MA+BaA,EAA0B,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,mBAAmBC,YAAY,GAAGC,cAAUC,IAEpG,UAjCwDC,IAAA,IAAC,KACvDC,EAAI,KACJC,EAAI,SACJC,GACD,SACCT,EAAAA,cAACU,EAAAA,EAAM,CAACR,MAAM,mBAAmBO,SAAUA,GACzCT,EAAAA,cAAAA,KAAAA,KAAI,0CACJA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,4BAAM,YAAe,0CAClC,4BAAM,YAAe,qCACzC,4BAAM,oBAAuB,MAEvCA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,0BAAI,cAAe,oBACxD,0BAAI,cAAe,gBAAa,0BAAI,YAAa,UAEvDA,EAAAA,cAAAA,IAAAA,KAAG,kCAC8BQ,EAAK,uBAAqB,IACxDD,EAAKI,KAAKC,UAAU,KAEvBZ,EAAAA,cAAAA,IAAAA,KAAG,kCAC+B,IAChCA,EAAAA,cAAAA,IAAAA,CAAGa,KAAK,yEAAwE,kCAE5E,KAGNb,EAAAA,cAACc,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,+CCLX,IAjCe,IAAoC,IAAnC,SAAEN,EAAQ,MAAEP,EAAK,SAAEE,GAAU,EAC3C,MACMY,EAD6B,MAChBP,EAASQ,SAC5B,IAAIC,EAoBJ,OAjBEA,EADEF,EAEA,sBAAIG,UAAU,gBACZ,gBAAC,EAAAL,KAAI,CAACC,GAAG,KACNb,EACD,wBAAMkB,MAAO,CACXC,SAAU,UACVC,WAAY,YACX,qBAMP,gBAAC,EAAAR,KAAI,CAACK,UAAU,mBAAmBJ,GAAG,KAAKb,GAK7C,uBAAKiB,UAAU,iBAAiB,oBAAmBH,GACjD,0BAAQG,UAAU,iBAAiBD,GACnC,4BAAOd,GACP,2BACA,0BAAQgB,MAAO,CAAEG,UAAW,WAAY,MAAQ,IAAIC,MAAOC,cAAc,wBACrE,C,+CCkBV,IAxCY,IAAgC,IAAD,UAA9B,MAAEvB,EAAK,KAAEwB,EAAI,SAAEtB,GAAU,EACpC,MAAM,KAAEO,IAASgB,EAAAA,EAAAA,gBAAe,cAiB1BC,EAA2B,QAApB,EAAGjB,EAAKkB,oBAAY,aAAjB,EAAmBD,QAC7BE,EAAO,GAAMF,EAAUF,EACvBK,EAAsB,cAAV7B,EAAyC,QAApB,EAAGS,EAAKkB,oBAAY,aAAjB,EAAmB3B,MAAWA,EAAK,OAAuB,QAAvB,EAAMS,EAAKkB,oBAAY,aAAjB,EAAmB3B,OAEtG,OACE,gCACE,wBAAM8B,OAAO,2BACb,6BAAQD,GACR,wBAAME,IAAI,OAAOpB,KAASe,EAAO,iBACjC,wBAAMM,KAAK,cAAcC,QAASxB,EAAKkB,aAAa1B,cACpD,wBAAMiC,SAAS,WAAWD,QAASJ,IACnC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMC,SAAS,WAAWD,QAAYP,EAAO,aAC7C,wBAAMQ,SAAS,SAASD,QAASL,IACjC,wBAAMM,SAAS,iBAAiBD,QAASxB,EAAKkB,aAAa1B,cAC3D,wBAAM+B,KAAK,eAAeC,QAAQ,YAClC,wBAAMD,KAAK,gBAAgBC,QAAYP,EAAO,aAC7CxB,EACA,C","sources":["webpack://weekly-notes/./src/pages/using-typescript.tsx","webpack://weekly-notes/./src/components/layout.js","webpack://weekly-notes/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" description=\"\" children={undefined} />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h2 className=\"main-heading\">\n        <Link to=\"/\">\n          {title}\n          <span style={{\n            fontSize: \"smaller\",\n            fontWeight: \"lighter\"\n          }}> - chonai-flora</span>\n          </Link>\n      </h2>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">{title}</Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <hr />\n      <footer style={{ textAlign: \"center\" }}>&copy; {new Date().getFullYear()}, Build with Gatsby </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ title, slug, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            siteUrl\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const siteUrl = site.siteMetadata?.siteUrl\n  const metaUrl = `${siteUrl}${slug}`\n  const metaTitle = title === \"All notes\" ? site.siteMetadata?.title : `${title} | ${site.siteMetadata?.title}`\n\n  return (\n    <>\n      <head prefix=\"og: https://ogp.me/ns#\" />\n      <title>{metaTitle}</title>\n      <link rel=\"icon\" href={`${siteUrl}/favicon.ico`} />\n      <meta name=\"description\" content={site.siteMetadata.description} />\n      <meta property=\"og:title\" content={metaTitle} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image\" content={`${siteUrl}/ogp.png`} />\n      <meta property=\"og:url\" content={metaUrl} />\n      <meta property=\"og:description\" content={site.siteMetadata.description} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:image\" content={`${siteUrl}/ogp.png`} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","description","children","undefined","_ref","data","path","location","Layout","site","buildTime","href","Link","to","isRootPath","pathname","header","className","style","fontSize","fontWeight","textAlign","Date","getFullYear","slug","useStaticQuery","siteUrl","siteMetadata","metaUrl","metaTitle","prefix","rel","name","content","property"],"sourceRoot":""}