{"version":3,"file":"component---src-pages-using-typescript-tsx-eacc91d9f08baa3319b7.js","mappings":"uMAaA,MA+BaA,EAA0B,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,mBAAmBC,YAAY,GAAGC,cAAUC,IAEpG,UAjCwDC,IAAA,IAAC,KACvDC,EAAI,KACJC,EAAI,SACJC,GACD,SACCT,EAAAA,cAACU,EAAAA,EAAM,CAACR,MAAM,mBAAmBO,SAAUA,GACzCT,EAAAA,cAAAA,KAAAA,KAAI,0CACJA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,4BAAM,YAAe,0CAClC,4BAAM,YAAe,qCACzC,4BAAM,oBAAuB,MAEvCA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,0BAAI,cAAe,oBACxD,0BAAI,cAAe,gBAAa,0BAAI,YAAa,UAEvDA,EAAAA,cAAAA,IAAAA,KAAG,kCAC8BQ,EAAK,uBAAqB,IACxDD,EAAKI,KAAKC,UAAU,KAEvBZ,EAAAA,cAAAA,IAAAA,KAAG,kCAC+B,IAChCA,EAAAA,cAAAA,IAAAA,CAAGa,KAAK,yEAAwE,kCAE5E,KAGNb,EAAAA,cAACc,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,+CCEX,IAxCe,IAAoC,IAAnC,SAAEN,EAAQ,MAAEP,EAAK,SAAEE,GAAU,EAC3C,MACMY,EADcC,mBACDR,EAASS,SAC5B,IAAIC,EA2BJ,OAxBEA,EADEH,EAEA,gCACE,sBAAII,UAAU,gBACZ,gBAAC,EAAAN,KAAI,CAACC,GAAG,KACNb,EACD,wBAAMmB,MAAO,CACXC,SAAU,UACVC,WAAY,YACX,qBAGP,2BACA,yBAAG,QAED,qBAAGV,KAAK,4CAA2C,OAAO,OAM9D,gBAAC,EAAAC,KAAI,CAACC,GAAG,IAAIK,UAAU,oBAAqBlB,GAK9C,uBAAKkB,UAAU,iBAAiB,oBAAmBJ,GACjD,0BAAQI,UAAU,iBAAiBD,GACnC,4BAAOf,GACP,2BACA,0BAAQiB,MAAO,CAAEG,UAAW,WAAY,MAAQ,IAAIC,MAAOC,cAAc,wBACrE,C,+CCaV,IA1CY,IAAgC,IAAD,UAA9B,MAAExB,EAAK,KAAEyB,EAAI,SAAEvB,GAAU,EACpC,MAAM,KAAEO,IAASiB,EAAAA,EAAAA,gBAAe,cAiB1BC,EAA2B,QAApB,EAAGlB,EAAKmB,oBAAY,aAAjB,EAAmBD,QAC7BE,EAAO,GAAMF,EAAUF,EACvBK,EAAYH,EAAO,KAAIF,EAAI,SAAYA,EAAKM,MAAM,GAAI,GAAE,OAAU,OAClEC,EAAYP,EAAUzB,EAAK,OAAuB,QAAvB,EAAMS,EAAKmB,oBAAY,aAAjB,EAAmB5B,OAA2B,QAAtB,EAAKS,EAAKmB,oBAAY,aAAjB,EAAmB5B,MAGvF,OADAiC,QAAQC,IAAIJ,GAEV,gCACE,wBAAMK,OAAO,2BACb,6BAAQH,GACR,wBAAMI,IAAI,OAAOzB,KAASgB,EAAO,iBACjC,wBAAMU,KAAK,cAAcC,QAAS7B,EAAKmB,aAAa3B,cACpD,wBAAMsC,SAAS,WAAWD,QAASN,IACnC,wBAAMO,SAAS,UAAUD,QAAQ,YACjC,wBAAMC,SAAS,WAAWD,QAASR,IACnC,wBAAMS,SAAS,SAASD,QAAST,IACjC,wBAAMU,SAAS,iBAAiBD,QAAS7B,EAAKmB,aAAa3B,cAC3D,wBAAMoC,KAAK,eAAeC,QAAQ,YAClC,wBAAMD,KAAK,gBAAgBC,QAASR,IACnC5B,EACA,C","sources":["webpack://weekly-notes/./src/pages/using-typescript.tsx","webpack://weekly-notes/./src/components/layout.js","webpack://weekly-notes/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" description=\"\" children={undefined} />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import { Link } from \"gatsby\"\nimport * as React from \"react\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <>\n        <h2 className=\"main-heading\">\n          <Link to=\"/\">\n            {title}\n            <span style={{\n              fontSize: \"smaller\",\n              fontWeight: \"lighter\"\n            }}> - chonai-flora</span>\n          </Link>\n        </h2>\n        <br />\n        <p>\n          週記です。\n          <a href=\"https://chonai-flora.github.io/archives/\">こちら</a>も。\n        </p>\n      </>\n    )\n  } else {\n    header = (\n      <Link to=\"/\" className=\"header-link-home\" >{title}</Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <hr />\n      <footer style={{ textAlign: \"center\" }}>&copy; {new Date().getFullYear()}, Build with Gatsby </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ title, slug, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            siteUrl\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const siteUrl = site.siteMetadata?.siteUrl\n  const metaUrl = `${siteUrl}${slug}`\n  const ogpSrc = `${siteUrl}/${slug ? `images${slug.slice(0, -1)}` : `ogp`}.png`\n  const metaTitle = slug ? `${title} | ${site.siteMetadata?.title}` : site.siteMetadata?.title\n\n  console.log(ogpSrc)\n  return (\n    <>\n      <head prefix=\"og: https://ogp.me/ns#\" />\n      <title>{metaTitle}</title>\n      <link rel=\"icon\" href={`${siteUrl}/favicon.ico`} />\n      <meta name=\"description\" content={site.siteMetadata.description} />\n      <meta property=\"og:title\" content={metaTitle} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image\" content={ogpSrc} />\n      <meta property=\"og:url\" content={metaUrl} />\n      <meta property=\"og:description\" content={site.siteMetadata.description} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:image\" content={ogpSrc} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","description","children","undefined","_ref","data","path","location","Layout","site","buildTime","href","Link","to","isRootPath","__PATH_PREFIX__","pathname","header","className","style","fontSize","fontWeight","textAlign","Date","getFullYear","slug","useStaticQuery","siteUrl","siteMetadata","metaUrl","ogpSrc","slice","metaTitle","console","log","prefix","rel","name","content","property"],"sourceRoot":""}