{"version":3,"file":"component---src-templates-blog-post-js-c15d6a18340ab7857770.js","mappings":"yIAoCA,IAjCe,IAAoC,IAAnC,SAAEA,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EAD6B,MAChBH,EAASI,SAC5B,IAAIC,EAoBJ,OAjBEA,EADEF,EAEA,sBAAIG,UAAU,gBACZ,gBAAC,EAAAC,KAAI,CAACC,GAAG,KACNP,EACD,wBAAMQ,MAAO,CACXC,SAAU,UACVC,WAAY,YACX,qBAMP,gBAAC,EAAAJ,KAAI,CAACD,UAAU,mBAAmBE,GAAG,KAAKP,GAK7C,uBAAKK,UAAU,iBAAiB,oBAAmBH,GACjD,0BAAQG,UAAU,iBAAiBD,GACnC,4BAAOH,GACP,2BACA,0BAAQO,MAAO,CAAEG,UAAW,WAAY,MAAQ,IAAIC,MAAOC,cAAc,wBACrE,C,+CCmBV,IAzCY,IAAgC,IAAD,UAA9B,MAAEb,EAAK,KAAEc,EAAI,SAAEb,GAAU,EACpC,MAAM,KAAEc,IAASC,EAAAA,EAAAA,gBAAe,cAiB1BC,EAA2B,QAApB,EAAGF,EAAKG,oBAAY,aAAjB,EAAmBD,QAC7BE,EAAO,GAAMF,EAAUH,EACvBM,EAAYH,EAAO,KAAIH,EAAI,SAAYA,EAAKO,MAAM,GAAI,GAAE,kBACxDC,EAAYR,EAAUd,EAAK,OAAuB,QAAvB,EAAMe,EAAKG,oBAAY,aAAjB,EAAmBlB,OAA2B,QAAtB,EAAKe,EAAKG,oBAAY,aAAjB,EAAmBlB,MAEvF,OACE,gCACE,wBAAMuB,OAAO,2BACb,6BAAQD,GACR,wBAAME,IAAI,OAAOC,KAASR,EAAO,iBACjC,wBAAMS,KAAK,cAAcC,QAASZ,EAAKG,aAAaU,cACpD,wBAAMC,SAAS,WAAWF,QAASL,IACnC,wBAAMO,SAAS,UAAUF,QAAQ,YACjC,wBAAME,SAAS,WAAWF,QAASP,IACnC,wBAAMS,SAAS,SAASF,QAASR,IACjC,wBAAMU,SAAS,iBAAiBF,QAASZ,EAAKG,aAAaU,cAC3D,wBAAMF,KAAK,eAAeC,QAAQ,YAClC,wBAAMD,KAAK,gBAAgBC,QAASP,IACnCnB,EACA,C,6GCzCP,MAoDa6B,EAAO,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACFjC,MAAOiC,EAAKC,YAAYlC,MACxBc,KAAMmB,EAAKE,OAAOrB,MAClB,EAIN,UA7DyB,IAGlB,IAAD,MAFJiB,MAAM,SAAEK,EAAQ,KAAEC,EAAI,KAAEtB,EAAMiB,eAAgBC,GAAM,SACpDlC,GACD,EACC,MAAMuC,GAA6B,QAAjB,EAAAvB,EAAKG,oBAAY,aAAjB,EAAmBlB,QAAK,QAE1C,OACE,gBAAC,IAAM,CAACD,SAAUA,EAAUC,MAAOsC,GACjC,2BACEjC,UAAU,YACVkC,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYR,EAAKC,YAAYlC,OAC1C,yBAAIiC,EAAKC,YAAYQ,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQX,EAAKY,MACxCJ,SAAS,iBAGb,uBAAKpC,UAAU,iBACb,sBACEG,MAAO,CACLsC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGd,GACC,gBAAC,EAAA9B,KAAI,CAACC,GAAI6B,EAASD,OAAOrB,KAAMU,IAAI,QAAO,KACtCY,EAASF,YAAYlC,QAI9B,0BACGqC,GACC,gBAAC,EAAA/B,KAAI,CAACC,GAAI8B,EAAKF,OAAOrB,KAAMU,IAAI,QAC7Ba,EAAKH,YAAYlC,MAAM,SAM3B,C","sources":["webpack://weekly-notes/./src/components/layout.js","webpack://weekly-notes/./src/components/seo.js","webpack://weekly-notes/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h2 className=\"main-heading\">\n        <Link to=\"/\">\n          {title}\n          <span style={{\n            fontSize: \"smaller\",\n            fontWeight: \"lighter\"\n          }}> - chonai-flora</span>\n          </Link>\n      </h2>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">{title}</Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <hr />\n      <footer style={{ textAlign: \"center\" }}>&copy; {new Date().getFullYear()}, Build with Gatsby </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ title, slug, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            siteUrl\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const siteUrl = site.siteMetadata?.siteUrl\n  const metaUrl = `${siteUrl}${slug}`\n  const ogpSrc = `${siteUrl}/${slug ? `images${slug.slice(0, -1)}.png` : `ogp.png`}`\n  const metaTitle = slug ? `${title} | ${site.siteMetadata?.title}` : site.siteMetadata?.title\n\n  return (\n    <>\n      <head prefix=\"og: https://ogp.me/ns#\" />\n      <title>{metaTitle}</title>\n      <link rel=\"icon\" href={`${siteUrl}/favicon.ico`} />\n      <meta name=\"description\" content={site.siteMetadata.description} />\n      <meta property=\"og:title\" content={metaTitle} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image\" content={ogpSrc} />\n      <meta property=\"og:url\" content={metaUrl} />\n      <meta property=\"og:description\" content={site.siteMetadata.description} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:image\" content={ogpSrc} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h2 itemProp=\"headline\">{post.frontmatter.title}</h2>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      slug={post.fields.slug}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY/MM/DD\")\n        description\n      }\n      fields {\n        slug\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["location","title","children","isRootPath","pathname","header","className","Link","to","style","fontSize","fontWeight","textAlign","Date","getFullYear","slug","site","useStaticQuery","siteUrl","siteMetadata","metaUrl","ogpSrc","slice","metaTitle","prefix","rel","href","name","content","description","property","Head","data","markdownRemark","post","frontmatter","fields","previous","next","siteTitle","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","display","flexWrap","justifyContent","listStyle","padding"],"sourceRoot":""}